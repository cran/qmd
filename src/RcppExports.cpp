// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// qmdrank
IntegerVector qmdrank(const NumericVector& x);
RcppExport SEXP _qmd_qmdrank(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(qmdrank(x));
    return rcpp_result_gen;
END_RCPP
}
// ECBC
NumericVector ECBC(const IntegerMatrix& X, R_xlen_t resolution);
RcppExport SEXP _qmd_ECBC(SEXP XSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(ECBC(X, resolution));
    return rcpp_result_gen;
END_RCPP
}
// EACBC
NumericVector EACBC(const IntegerMatrix& X, R_xlen_t resolution);
RcppExport SEXP _qmd_EACBC(SEXP XSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(EACBC(X, resolution));
    return rcpp_result_gen;
END_RCPP
}
// adaptive_masses
NumericVector adaptive_masses(const IntegerVector& X, R_xlen_t resolution);
RcppExport SEXP _qmd_adaptive_masses(SEXP XSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptive_masses(X, resolution));
    return rcpp_result_gen;
END_RCPP
}
// CB_make_cumulative_df
List CB_make_cumulative_df(NumericVector& CB);
RcppExport SEXP _qmd_CB_make_cumulative_df(SEXP CBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type CB(CBSEXP);
    rcpp_result_gen = Rcpp::wrap(CB_make_cumulative_df(CB));
    return rcpp_result_gen;
END_RCPP
}
// random_CB
NumericVector random_CB(R_xlen_t rho, R_xlen_t steps, double de, double ie);
RcppExport SEXP _qmd_random_CB(SEXP rhoSEXP, SEXP stepsSEXP, SEXP deSEXP, SEXP ieSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< R_xlen_t >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type de(deSEXP);
    Rcpp::traits::input_parameter< double >::type ie(ieSEXP);
    rcpp_result_gen = Rcpp::wrap(random_CB(rho, steps, de, ie));
    return rcpp_result_gen;
END_RCPP
}
// sample_CB
NumericVector sample_CB(NumericVector& CB, R_xlen_t n);
RcppExport SEXP _qmd_sample_CB(SEXP CBSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type CB(CBSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_CB(CB, n));
    return rcpp_result_gen;
END_RCPP
}
// local_kernel_integral
double local_kernel_integral(const NumericVector& k1, const NumericVector& k2, const NumericVector& y);
RcppExport SEXP _qmd_local_kernel_integral(SEXP k1SEXP, SEXP k2SEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(local_kernel_integral(k1, k2, y));
    return rcpp_result_gen;
END_RCPP
}
// EACBC_nonzero
List EACBC_nonzero(const IntegerMatrix& X, R_xlen_t resolution);
RcppExport SEXP _qmd_EACBC_nonzero(SEXP XSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(EACBC_nonzero(X, resolution));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qmd_qmdrank", (DL_FUNC) &_qmd_qmdrank, 1},
    {"_qmd_ECBC", (DL_FUNC) &_qmd_ECBC, 2},
    {"_qmd_EACBC", (DL_FUNC) &_qmd_EACBC, 2},
    {"_qmd_adaptive_masses", (DL_FUNC) &_qmd_adaptive_masses, 2},
    {"_qmd_CB_make_cumulative_df", (DL_FUNC) &_qmd_CB_make_cumulative_df, 1},
    {"_qmd_random_CB", (DL_FUNC) &_qmd_random_CB, 4},
    {"_qmd_sample_CB", (DL_FUNC) &_qmd_sample_CB, 2},
    {"_qmd_local_kernel_integral", (DL_FUNC) &_qmd_local_kernel_integral, 3},
    {"_qmd_EACBC_nonzero", (DL_FUNC) &_qmd_EACBC_nonzero, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_qmd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
